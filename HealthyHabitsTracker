# This Python code implements a GUI application called "Healthy Habits Tracker" using the tkinter library.
# It provides an interface for users to track their daily water intake, sleep duration, exercise minutes, food calories, and other settings.

# Import tkinter and other necessary modules
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkinter import PhotoImage
import re

# Define the main class for the application
class HealthyHabitsTracker:
    def __init__(self, master):
        self.master = master
        self.master.title("Healthy Habits Tracker")

        # Create a style object
        style = ttk.Style()

        # Set the background color of the window
        style.configure('TFrame', background='white')

        # Set the font and size for all labels
        style.configure('TLabel', font=('Arial', 14), foreground='navy')

        # Set the background color of all labels
        style.configure('TLabel', background='white')

        # Set the button color 
        style.configure('TButton', foreground='navy', background='light blue')

        # Set the colors for each tab
        style.map('TNotebook.Tab',
                  background=[('selected', '#4f5d49'), ('active', '#4f5d49')],
                  foreground=[('selected', 'dark blue'), ('active', 'dark blue')])


        # Initialize instance variables
        self.water_amount = tk.StringVar(value="0")  # String variable to hold the value of water amount
        self.sleep_hours = tk.StringVar(value="0")  # String variable to hold the value of sleep hours
        self.activity_minutes = tk.StringVar(value="0")  # String variable to hold the value of activity minutes
        self.food_calories = tk.StringVar(value="0")  # String variable to hold the value of food calories
        self.food_item = tk.StringVar(value="0")  # String variable to hold the value of food item
        self.water_history = []  # List variable to store the history of water amount
        self.water_level = 0 # Current water level
        self.sleep_history = []  # List variable to store the history of sleep hours
        self.activity_history = []  # List variable to store the history of activity minutes
        self.food_history = []  # List variable to store the history of food calories and items
        self.name = tk.StringVar() # String variable to hold user's name
        self.app_notification = tk.BooleanVar(value=False)  # Boolean variable to enable or disable app notifications
        self.email_notification = tk.BooleanVar(value=False)  # Boolean variable to enable or disable email notifications
        self.sms_notification = tk.BooleanVar(value=False)  # Boolean variable to enable or disable SMS notifications
        self.email_address = tk.StringVar(value="")  # String variable to hold the email address
        self.phone_number = tk.StringVar(value="")  # String variable to hold the phone number
     

        # Create the notebook widget
        self.notebook = ttk.Notebook(master, padding=0)
        self.notebook.pack(fill='both', expand=True)

        # Define list attributes
        self.sleep_list = []  # List variable to hold the sleep data
        self.activity_list = []  # List variable to hold the activity data

        # Create tabs for each habit
        self.tabs = ttk.Notebook(self.master)

        self.homescreen_tab = ttk.Frame(self.tabs)
        self.water_tab = ttk.Frame(self.tabs)
        self.sleep_tab = ttk.Frame(self.tabs)
        self.activity_tab = ttk.Frame(self.tabs)
        self.food_tab = ttk.Frame(self.tabs)
        self.settings_tab = ttk.Frame(self.tabs)

        # Create homescreen tab
        self.create_homescreen_tab()

        # Add tabs to the notebook widget
        self.tabs.add(self.homescreen_tab, text="Home")
        self.tabs.add(self.water_tab, text="Water")
        self.tabs.add(self.sleep_tab, text="Sleep")
        self.tabs.add(self.activity_tab, text="Exercise")
        self.tabs.add(self.food_tab, text="Calories")
        self.tabs.add(self.settings_tab, text="Settings")

        # Add widgets to each tab
        self.create_water_tab()
        self.create_sleep_tab()
        self.create_activity_tab()
        self.create_food_tab()
        self.create_settings_tab()

        # Pack the notebook widget
        self.tabs.pack(expand=1, fill="both")

    def create_homescreen_tab(self):
        # This function creates widgets for the homescreen tab
        self.homescreen_tab = ttk.Frame(self.tabs)
        self.homescreen_tab.columnconfigure(0, weight=1)
        self.homescreen_tab.rowconfigure(0, weight=1)

        # Create a label with the app's name and logo
        label = ttk.Label(self.homescreen_tab, text="Welcome to Healthy Habits Tracker!", font=("TkDefaultFont", 32), foreground="dark blue")
        label.grid(column=0, row=0, padx=10, pady=10, sticky="nsew")
        label.config(anchor="center")
        self.image = tk.PhotoImage(file="C:/Users/Kenna/OneDrive/Desktop/Logo.png")
        label = ttk.Label(self.homescreen_tab, image=self.image, text="Logo for Healthy Habits Tracker")
        label.grid(column=0, row=1, padx=10, pady=10, sticky="nsew")
        label.config(anchor="center")

         # Create an exit button
        exit_button = ttk.Button(self.homescreen_tab, text="Exit", command=self.exit_program)
        exit_button.grid(column=0, row=2, padx=10, pady=10,)

    def exit_program(self):
        if messagebox.askyesno("Exit", "Are you sure you want to exit?"):
            self.master.destroy()
    
    def create_water_tab(self):
        # This function creates widgets for the water tab
        ttk.Label(self.water_tab, text="Water Intake Tracker", font=("TkDefaultFont", 16)).grid(column=0, row=0, padx=10, pady=10)
        ttk.Label(self.water_tab, text="How many ounces of water did you drink?").grid(column=0, row=1, padx=10, pady=10)
        self.water_entry = ttk.Entry(self.water_tab, textvariable=self.water_amount)
        self.water_entry.grid(column=1, row=1, padx=10, pady=10)
        ttk.Button(self.water_tab, text="Add", command=self.add_water).grid(column=2, row=1, padx=10, pady=10)

        # Create widgets for tracking water intake
        label = ttk.Label(self.water_tab, text="Water consumed this week:")
        label.grid(column=0, row=2, padx=10, pady=10)
        self.water_listbox = tk.Listbox(self.water_tab)
        self.water_listbox.grid(column=0, row=3, columnspan=3, padx=10, pady=10)
        button = ttk.Button(self.water_tab, text="Clear", command=self.clear_water)
        button.grid(column=2, row=4, padx=10, pady=10)

        # Create widget for displaying total water intake
        self.water_total_label = ttk.Label(self.water_tab, text="Total water consumed: 0 oz")
        self.water_total_label.grid(column=0, row=5, columnspan=3, padx=10, pady=10)

        # Add an image of water splash to the right side
        self.water_image = tk.PhotoImage(file="C:/Users/Kenna/OneDrive/Desktop/watersplash.png")
        self.water_image = self.water_image.subsample(3)
        self.water_image_label = ttk.Label(self.water_tab, image=self.water_image, text="Splashed Water")
        self.water_image_label.grid(column=3, row=0, rowspan=6, padx=10, pady=10)
        self.water_image_label.config(anchor="center")

    def add_water(self):
        # This function is called when the user clicks the "Add" button on the water tab
        try:
            amount = float(self.water_amount.get())
            self.water_level += amount
            self.water_amount.set("0")
            self.water_history.append(amount)
            self.water_listbox.insert(tk.END, f"{amount} oz")
            total = sum(self.water_history)
            self.water_total_label.configure(text=f"Total water consumed: {total} oz")
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid number for water intake.")

    def clear_water(self):
        # This function clears the water entry field, the water listbox, and updates the total amount of water consumed.
        self.water_entry.delete(0, tk.END)
        self.water_entry.insert(0, "0")
        self.water_history.clear()
        self.water_listbox.delete(0, tk.END)
        self.update_water_total()

    def update_water_total(self):
        # This function calculates the total amount of water consumed from the water history and displays it.
        total = sum(self.water_history)
        self.water_total_label.configure(text=f"You drank {total} ounces of water this week!")

  
    def create_sleep_tab(self):
        # Create widgets for the sleep tab
        ttk.Label(self.sleep_tab, text="Sleep Tracker", font=("TkDefaultFont", 16)).pack(side="top", padx=10, pady=10)
        ttk.Label(self.sleep_tab, text="How many hours did you sleep?").pack(side="top", padx=10, pady=10)
        self.sleep_entry = ttk.Entry(self.sleep_tab)
        self.sleep_entry.pack(side="top", padx=10, pady=10)
        self.sleep_entry['validatecommand'] = (self.sleep_entry.register(self.validate_sleep_hours), '%P')
        ttk.Button(self.sleep_tab, text="Add", command=self.add_sleep).pack(side="top", padx=10, pady=10)
        ttk.Label(self.sleep_tab, text="Hours slept this week:").pack(side="top", padx=10, pady=10)
        self.sleep_listbox = tk.Listbox(self.sleep_tab, height=5)
        self.sleep_listbox.pack(side="top", padx=10, pady=10)
        self.sleep_average_label = ttk.Label(self.sleep_tab, text="")
        self.sleep_average_label.pack(side="top", padx=10, pady=10)
        ttk.Button(self.sleep_tab, text="Clear", command=self.clear_sleep_list).pack(side="top", padx=10, pady=10)

    def validate_sleep_hours(self, input):
        # Check if the input is a valid number between 0 and 24
        if input.isdigit() and int(input) <= 24:
            return True
        else:
            return False    

    def add_sleep(self):
        # Add the sleep hours to the list and update the display
        try:
            hours = int(self.sleep_entry.get())
            if hours > 24:
                raise ValueError("Sleep hours cannot be greater than 24.")
            self.sleep_list.append(hours)
            self.sleep_listbox.delete(0, tk.END)
            for h in self.sleep_list:
                self.sleep_listbox.insert(tk.END, str(h))
            self.update_sleep_total()
        except ValueError as e:
            # Show an error message if the input is invalid
            messagebox.showerror("Error", str(e))

    def clear_sleep_list(self):
        # Clear the sleep hours list and update the display
        self.sleep_list = []
        self.sleep_listbox.delete(0, tk.END)
        self.update_sleep_total()        

    def update_sleep_total(self):
        # Update the total sleep hours and average display
        if len(self.sleep_list) > 0:
            total = sum(self.sleep_list)
            self.sleep_average_label.config(text=f"You slept {total:.1f} hours this week!")
        else:
            self.sleep_average_label.config(text="")


    def create_activity_tab(self):
        # Create widgets for the activity tab
        ttk.Label(self.activity_tab, text="Exercise Tracker", font=("TkDefaultFont", 16)).pack(side="top", padx=10, pady=10)
        ttk.Label(self.activity_tab, text="How many minutes did you exercise?").pack(side="top", padx=10, pady=10)
        self.activity_entry = ttk.Entry(self.activity_tab)
        self.activity_entry.pack(side="top", padx=10, pady=10)
        ttk.Button(self.activity_tab, text="Add", command=self.add_activity).pack(side="top", padx=10, pady=10)
        ttk.Button(self.activity_tab, text="Clear", command=self.clear_activity_list).pack(side="bottom", padx=10, pady=10)
        ttk.Label(self.activity_tab, text="Minutes of exercise this week:").pack(side="top", padx=10, pady=10)
        self.activity_listbox = tk.Listbox(self.activity_tab, height=5)
        self.activity_listbox.pack(side="top", padx=10, pady=10)
        self.activity_average_label = ttk.Label(self.activity_tab, text="")
        self.activity_average_label.pack(side="top", padx=10, pady=10)

    def add_activity(self):
        try:
            # Get the number of minutes entered in the activity entry field
            minutes = float(self.activity_entry.get())
            self.activity_minutes.set(str(minutes))
            
            # Add the minutes to the activity list and update the activity listbox
            self.activity_list.append(minutes)
            self.activity_listbox.delete(0, tk.END)
            for m in self.activity_list:
                self.activity_listbox.insert(tk.END, str(m))
            self.update_activity_total()
        except ValueError:
            # Show an error message if the entered value is not a valid number
            messagebox.showerror("Error", "Please enter a valid number for activity minutes.")

    def update_activity_total(self):
        # Calculate the total number of minutes and update the activity average label
        total = sum(self.activity_list)
        self.activity_average_label.config(text=f"You exercised for {total:.1f} minutes this week. Keep up the good work!")

    def clear_activity_list(self):
        # Clear the activity list and update the activity listbox and total label
        self.activity_list.clear()
        self.activity_listbox.delete(0, tk.END)
        self.update_activity_total()


    def create_food_tab(self):
       # Create widgets for the food tab
        ttk.Label(self.food_tab, text="Calorie Tracker", font=("TkDefaultFont", 16)).pack(side="top", padx=10, pady=10)
        ttk.Label(self.food_tab, text="Calories consumed:").pack(side="top", padx=10, pady=10)
        self.food_entry = ttk.Entry(self.food_tab)
        self.food_entry.pack(side="top", padx=10, pady=10)
        self.calories_entry = ttk.Entry(self.food_tab)
        ttk.Button(self.food_tab, text="Add", command=self.add_food).pack(side="top", padx=10, pady=10)
        ttk.Label(self.food_tab, text="Total calories today:").pack(side="top", padx=10, pady=10)
        self.food_calories = tk.StringVar()
        self.food_calories_label = ttk.Label(self.food_tab, textvariable=self.food_calories)
        self.food_calories_label.pack(side="top", padx=10, pady=10)
        ttk.Button(self.food_tab, text="Clear", command=self.clear_food_list).pack(side="bottom", padx=10, pady=10)

    def add_food(self):
        try:
            calories = float(self.food_entry.get())
            if calories <= 0:
                raise ValueError
             # Add the calories to the total and update the label
            self.food_calories.set("{:.2f}".format(float(self.food_calories.get() or 0) + calories))
        except ValueError:
            # Show an error message if the input is not valid
            messagebox.showerror("Error", "Please enter a valid number for calories.")

    def update_food_calories(self):
         # Update the food calorie label with the total calories consumed today
        if len(self.food_calories) > 0:
            total_calories = sum(self.food_calories)
            self.food_calories_label.config(text=f"You've had {total_calories:.1f} calories today")
        else:
             # Clear the label if there are no calories consumed
            self.food_calories_label.config(text="")

    def clear_food_list(self):
         # Clear the food entry and reset the calories and data
        self.food_entry.delete(0, tk.END)
        self.food_calories.set(0)
        self.food_data.clear()

    def create_settings_tab(self):
        # Add widgets for settings
        settings_label = ttk.Label(self.settings_tab, text="Settings", font=("TkDefaultFont", 16))
        settings_label.pack(side="top", padx=10, pady=10)

        # Add widgets for notifications
        notify_label = ttk.Label(self.settings_tab, text="Reminders to log daily habits:")
        notify_label.pack(side="top", padx=10, pady=10)

        # Add widgets for email and phone number
        email_label = ttk.Label(self.settings_tab, text="Email address:")
        email_entry = ttk.Entry(self.settings_tab, textvariable=self.email_address,
                                validate="focusout", validatecommand=self.validate_email)

        phone_label = ttk.Label(self.settings_tab, text="Phone number:")
        phone_entry = ttk.Entry(self.settings_tab, textvariable=self.phone_number,
                                validate="focusout", validatecommand=self.validate_phone_number)
        phone_entry.bind('<FocusOut>', self.validate_phone_number)  # add this line

        def toggle_email():
             if self.email_notification.get():
                 email_label.pack(side="top", padx=10, pady=10)
                 email_entry.pack(side="top", padx=10, pady=2)
             else:
                 email_label.pack_forget()
                 email_entry.pack_forget()

        def toggle_phone():
             if self.sms_notification.get():
                 phone_label.pack(side="top", padx=10, pady=10)
                 phone_entry.pack(side="top", padx=10, pady=2)
             else:
                 phone_label.pack_forget()
                 phone_entry.pack_forget()

        app_check = ttk.Checkbutton(self.settings_tab, text="In-app", variable=self.app_notification)
        app_check.pack(side="top", padx=10, pady=2)

        email_check = ttk.Checkbutton(self.settings_tab, text="Email", variable=self.email_notification, command=toggle_email)
        email_check.pack(side="top", padx=10, pady=2)

        sms_check = ttk.Checkbutton(self.settings_tab, text="SMS", variable=self.sms_notification, command=toggle_phone)
        sms_check.pack(side="top", padx=10, pady=2)

        # Add a button to save the settings
        save_button = ttk.Button(self.settings_tab, text="Save Settings", command=self.save_settings)
        save_button.pack(side="bottom", padx=10, pady=10)

        # Add a button to clear the settings
        clear_button = ttk.Button(self.settings_tab, text="Clear Settings", command=self.clear_settings)
        clear_button.pack(side="bottom", padx=10, pady=10)

    def validate_email(self):
        email = self.email_address.get()
        if re.match(r"[^@]+@[^@]+\.[^@]+", email):
            return True
        else:
            messagebox.showerror("Error", "Invalid email address.")
            return False

    def validate_phone_number(self):
           # Get the phone number from the phone number entry widget
         phone_number = self.phone_number.get()

         # Remove all non-numeric characters from the phone number
         phone_number = re.sub('[^0-9]', '', phone_number)

         # Check if the phone number is valid
         if len(phone_number) != 10:
             messagebox.showerror('Invalid phone number', 'Please enter a 10-digit phone number.')

    def save_settings(self):
        # Write the settings to a file or database
        with open('settings.txt', 'w') as f:
            f.write(f'In-app notifications: {self.app_notification.get()}\n')
            f.write(f'Email notifications: {self.email_notification.get()}\n')
            if self.email_notification.get():
               f.write(f'Email address: {self.email_address.get()}\n')
            f.write(f'SMS notifications: {self.sms_notification.get()}\n')
            if self.sms_notification.get():
                f.write(f'Phone number: {self.phone_number.get()}\n')

        # Show a message to the user that the settings were saved
        messagebox.showinfo('Settings saved', 'Your settings have been saved.')
    
    def clear_settings(self):
        # Clear all the settings
        self.app_notification.set(False)
        self.email_notification.set(False)
        self.sms_notification.set(False)
        self.email_address.set("")
        self.phone_number.set("")

root = tk.Tk()
app = HealthyHabitsTracker(root)
root.mainloop()
